# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

mutation itsystem_create($input: ITSystemCreateInput!) {
  itsystem_create(input: $input) {
    uuid
  }
}

query read_facet_classes($facet_user_key: String!) {
  classes(filter: {facet: {user_keys: [$facet_user_key]}}) {
    objects {
      current {
        user_key
        uuid
        scope
        name
      }
    }
  }
}

query read_facet_uuid($user_key: String!) {
  facets(filter: {user_keys: [$user_key]}) {
    objects {
      uuid
    }
  }
}

mutation class_create($input: ClassCreateInput!) {
  class_create(input: $input) {
    uuid
  }
}

query read_class_uuid($user_key: String!) {
  classes(filter: {user_keys: [$user_key]}) {
    objects {
      uuid
    }
  }
}

mutation class_update($input: ClassUpdateInput!) {
  class_update(input: $input) {
    uuid
  }
}

query read_root_org_uuid {
  org {
    uuid
  }
}

mutation address_terminate($input: AddressTerminateInput!) {
  address_terminate(input: $input) {
    uuid
  }
}

mutation engagement_terminate($input: EngagementTerminateInput!) {
  engagement_terminate(input: $input) {
    uuid
  }
}

mutation ituser_terminate($input: ITUserTerminateInput!) {
  ituser_terminate(input: $input) {
    uuid
  }
}

query read_employees_with_engagement_to_org_unit($org_unit_uuid: UUID!) {
  engagements(filter: {org_unit: {uuids: [$org_unit_uuid]}}) {
    objects {
      current {
        employee_uuid
      }
    }
  }
}

query read_engagements($uuids: [UUID!]!, $from_date: DateTime, $to_date: DateTime) {
  engagements(filter: {uuids: $uuids, from_date: $from_date, to_date: $to_date}) {
    objects {
      validities {
        user_key
        extension_1
        extension_2
        extension_3
        extension_4
        extension_5
        extension_6
        extension_7
        extension_8
        extension_9
        extension_10
        leave_uuid
        primary_uuid
        job_function_uuid
        org_unit_uuid
        engagement_type_uuid
        employee_uuid
        validity {
          from
          to
        }
      }
    }
  }
}

query read_engagements_by_employee_uuid($employee_uuid: UUID!) {
  engagements(filter: {employee: {uuids: [$employee_uuid]}}) {
    objects {
      current {
        uuid
        validity {
          from
          to
        }
      }
    }
  }
}

query read_engagements_by_engagements_filter($engagements_filter: EngagementFilter!) {
  engagements(filter: $engagements_filter) {
    objects {
      current {
        uuid
        user_key
        org_unit_uuid
        job_function_uuid
        engagement_type_uuid
        primary_uuid
      }
    }
  }
}

mutation set_job_title($uuid: UUID!,
                     $from: DateTime!,
                     $to: DateTime,
                     $job_function: UUID) {
  engagement_update(
    input: {uuid: $uuid,
            validity: {from: $from, to: $to},
            job_function: $job_function}
  ) {
    uuid
  }
}

query read_employee_uuid_by_cpr_number($cpr_number: CPR!) {
  employees(filter: {cpr_numbers: [$cpr_number]}) {
    objects {
      uuid
    }
  }
}

query read_employees($uuids: [UUID!]!, $from_date: DateTime, $to_date: DateTime) {
  employees(filter: {from_date: $from_date, to_date: $to_date, uuids: $uuids}) {
    objects {
      validities {
        uuid
        cpr_no
        givenname
        surname
        nickname_givenname
        nickname_surname
        validity {
          to
          from
        }
      }
    }
  }
}

query read_itusers($uuids: [UUID!]!, $from_date: DateTime, $to_date: DateTime) {
  itusers(filter: {from_date: $from_date, to_date: $to_date, uuids: $uuids}) {
    objects {
      validities {
        user_key
        validity {
          from
          to
        }
        employee_uuid
        itsystem_uuid
        engagement_uuid
      }
    }
  }
}

query read_employee_uuid_by_ituser_user_key($user_key: String!) {
  itusers(filter: {user_keys: [$user_key]}) {
    objects {
      current {
        employee_uuid
      }
    }
  }
}

query read_engagement_uuid_by_ituser_user_key($user_key: String!, $itsystem_uuid: UUID!) {
  itusers(
    filter: {
      user_keys: [$user_key],
      itsystem: {uuids: [$itsystem_uuid]}
    }
  ) {
    objects {
      current {
        engagement_uuid
      }
    }
  }
}

query read_ituser_by_employee_and_itsystem_uuid($employee_uuid: UUID!, $itsystem_uuid: UUID!) {
  itusers(
    filter: {
      employee: {uuids: [$employee_uuid]},
      itsystem: {uuids: [$itsystem_uuid]}
    }
  ) {
    objects {
      uuid
    }
  }
}

query read_is_primary_engagements($uuids: [UUID!]!) {
  engagements(filter: {uuids: $uuids}) {
    objects {
      current {
        is_primary
        uuid
      }
    }
  }
}

query read_employee_addresses($employee_uuid: UUID!, $address_type_uuid: UUID!) {
  addresses(
    filter: {
      address_type: {uuids: [$address_type_uuid]},
      employee: {uuids: [$employee_uuid]}
    }
  ) {
    objects {
      uuid
    }
  }
}

query read_org_unit_addresses($org_unit_uuid: UUID!, $address_type_uuid: UUID!) {
  addresses(
    filter: {
      address_type: {uuids: [$address_type_uuid]},
      org_unit: {uuids: [$org_unit_uuid]}
    }
  ) {
    objects {
      uuid
    }
  }
}

query read_engagement_org_unit_uuid($engagement_uuid: UUID!) {
  engagements(filter: {uuids: [$engagement_uuid]}) {
    objects {
      current {
        org_unit_uuid
      }
    }
  }
}

query read_class_uuid_by_facet_and_class_user_key(
  $facet_user_key: String!,
  $class_user_key: String!
) {
  classes(
    filter: {
      facet: {user_keys: [$facet_user_key]},
      user_keys: [$class_user_key]
    }
  ) {
    objects {
      uuid
    }
  }
}

query read_class_name_by_class_uuid($class_uuid: UUID!) {
  classes(filter: {uuids: [$uuids]}) {
    objects {
      current {
        name
      }
    }
  }
}

mutation engagement_refresh($exchange: String!, $uuid: UUID!) {
  engagement_refresh(exchange: $exchange, filter: {uuids: [$uuid]}) {
    objects
  }
}

mutation address_refresh($exchange: String!, $uuid: UUID!) {
  address_refresh(exchange: $exchange, filter: {uuids: [$uuid]}) {
    objects
  }
}

mutation ituser_refresh($exchange: String!, $uuid: UUID!) {
  ituser_refresh(exchange: $exchange, filter: {uuids: [$uuid]}) {
    objects
  }
}

mutation org_unit_engagements_refresh($exchange: String!, $org_unit_uuid: UUID!) {
  engagement_refresh(exchange: $exchange, filter: {org_unit: {uuids: [$org_unit_uuid]}}) {
    objects
  }
}

mutation person_address_refresh(
  $exchange: String!, $person_uuid: UUID!, $address_type_uuids: [UUID!]!
) {
  address_refresh(
    exchange: $exchange,
    filter: {
      address_type: {uuids: $address_type_uuids},
      employee: {uuids: [$person_uuid]}
    }
  ) {
    objects
  }
}

mutation person_engagement_refresh(
  $exchange: String!, $person_uuid: UUID!
) {
  engagement_refresh(
    exchange: $exchange,
    filter: {
      employee: {uuids: [$person_uuid]}
    }
  ) {
    objects
  }
}

mutation person_ituser_refresh(
  $exchange: String!, $person_uuid: UUID!, $it_system_uuids: [UUID!]!
) {
  ituser_refresh(
    exchange: $exchange,
    filter: {
      itsystem: {uuids: $it_system_uuids},
      employee: {uuids: [$person_uuid]}
    }
  ) {
    objects
  }
}

query read_addresses($uuids: [UUID!]!, $from_date: DateTime, $to_date: DateTime) {
  addresses(filter: {uuids: $uuids, from_date: $from_date, to_date: $to_date}) {
    objects {
      validities {
        value: name
        value2
        uuid
        visibility_uuid
        employee_uuid
        org_unit_uuid
        engagement_uuid
        person: employee {
          cpr_no
        }
        validity {
          from
          to
        }
        address_type {
          user_key
          uuid
        }
      }
    }
  }
}

query read_itsystems {
  itsystems {
    objects {
      current {
        uuid
        user_key
      }
    }
  }
}

query read_org_units {
  org_units(filter: {from_date: null, to_date: null}) {
    objects {
      uuid
      validities {
        uuid
        name
        user_key
        parent_uuid
        validity {
          to
          from
        }
      }
    }
  }
}

query read_class_user_keys($facet_user_keys: [String!]!) {
  classes(filter: {facet: {user_keys: $facet_user_keys}}) {
    objects {
      current {
        user_key
      }
    }
  }
}

query read_all_itusers($itsystem_uuid: UUID!, $cursor: Cursor) {
  itusers(
    limit: 100,
    cursor: $cursor,
    filter: $filter
  ) {
    objects {
      validities {
        itsystem_uuid
        employee_uuid
        user_key
      }
    }
    page_info {
      next_cursor
    }
  }
}

query read_all_employee_uuids($filter: EmployeeFilter!, $cursor: Cursor = null, $limit: Int = 100) {
  employees(
    limit: 100,
    cursor: $cursor,
    filter: $filter,
  ) {
    objects {
      validities {
        uuid
        validity {
            from
            to
        }
      }
    }
    page_info {
      next_cursor
    }
  }
}

query read_all_org_unit_uuids($filter: OrganisationUnitFilter!, $cursor: Cursor = null, $limit: Int = 100) {
  org_units(
    limit: 100,
    cursor: $cursor,
    filter: $filter,
  ) {
    objects {
      validities {
        uuid
        validity {
            from
            to
        }
      }
    }
    page_info {
      next_cursor
    }
  }
}

query read_all_address_uuids($filter: AddressFilter!, $cursor: Cursor = null, $limit: Int = 100) {
  addresses(
    limit: 100,
    cursor: $cursor,
    filter: $filter,
  ) {
    objects {
      validities {
        uuid
        org_unit_uuid
        employee_uuid
        validity {
            from
            to
        }
      }
    }
    page_info {
      next_cursor
    }
  }
}

query read_all_ituser_uuids($filter: ITUserFilter!, $cursor: Cursor = null, $limit: Int = 100) {
  itusers(
    limit: 100,
    cursor: $cursor,
    filter: $filter,
  ) {
    objects {
      validities {
        uuid
        org_unit_uuid
        employee_uuid
        validity {
            from
            to
        }
      }
    }
    page_info {
      next_cursor
    }
  }
}

query read_all_engagement_uuids($filter: EngagementFilter!, $cursor: Cursor = null, $limit: Int = 100) {
  engagements(
    limit: 100,
    cursor: $cursor,
    filter: $filter,
  ) {
    objects {
      validities {
        uuid
        org_unit_uuid
        employee_uuid
        validity {
            from
            to
        }
      }
    }
    page_info {
      next_cursor
    }
  }
}
