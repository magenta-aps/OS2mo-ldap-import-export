# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

# Testing queries

query __testing__address_read($filter: AddressFilter) {
  addresses(filter: $filter) {
    objects {
      validities {
        uuid
        user_key
        address_type {
          user_key
        }
        value
        value2
        person {
          uuid
        }
        visibility {
          user_key
        }
        validity {
          from
          to
        }
      }
    }
  }
}

query __testing__engagement_read($filter: EngagementFilter) {
  engagements(filter: $filter) {
    objects {
      validities {
        uuid
        user_key
        person {
          uuid
        }
        org_unit {
          uuid
        }
        engagement_type {
          user_key
        }
        job_function {
          user_key
        }
        primary {
          user_key
        }
        extension_1
        validity {
          from
          to
        }
      }
    }
  }
}

query __testing__employee_read($filter: EmployeeFilter) {
  employees(filter: $filter) {
    objects {
      validities {
        uuid
        user_key
        cpr_number
        given_name
        surname
        nickname_given_name
        nickname_surname
      }
    }
  }
}

query __testing__ituser_read($filter: ITUserFilter) {
  itusers(filter: $filter) {
    objects {
      validities {
        uuid
        user_key
        itsystem {
          user_key
        }
        person {
          uuid
        }
        validity {
          from
          to
        }
      }
    }
  }
}

mutation __testing__itsystem_create($input: ITSystemCreateInput!) {
  itsystem_create(input: $input) {
    uuid
  }
}


# Normal queries

mutation address_create($input: AddressCreateInput!) {
  address_create(input: $input) {
    uuid
  }
}

mutation address_update($input: AddressUpdateInput!) {
  address_update(input: $input) {
    uuid
  }
}

mutation address_terminate($input: AddressTerminateInput!) {
  address_terminate(input: $input) {
    uuid
  }
}

mutation user_create($input: EmployeeCreateInput!) {
  employee_create(input: $input) {
    uuid
  }
}

mutation user_update($input: EmployeeUpdateInput!) {
  employee_update(input: $input) {
    uuid
  }
}

mutation engagement_create($input: EngagementCreateInput!) {
  engagement_create(input: $input) {
    uuid
  }
}

mutation engagement_update($input: EngagementUpdateInput!) {
  engagement_update(input: $input) {
    uuid
  }
}

mutation engagement_terminate($input: EngagementTerminateInput!) {
  engagement_terminate(input: $input) {
    uuid
  }
}

mutation ituser_create($input: ITUserCreateInput!) {
  ituser_create(input: $input) {
    uuid
  }
}

mutation ituser_update($input: ITUserUpdateInput!) {
  ituser_update(input: $input) {
    uuid
  }
}

mutation ituser_terminate($input: ITUserTerminateInput!) {
  ituser_terminate(input: $input) {
    uuid
  }
}

query read_facet_uuid($user_key: String!) {
  facets(filter: { user_keys: [$user_key] }) {
    objects {
      uuid
    }
  }
}

mutation class_create($input: ClassCreateInput!) {
  class_create(input: $input) {
    uuid
  }
}

query read_class_uuid($user_key: String!) {
  classes(filter: { user_keys: [$user_key] }) {
    objects {
      uuid
    }
  }
}

mutation org_unit_create($input: OrganisationUnitCreateInput!) {
  org_unit_create(input: $input) {
    uuid
  }
}

query read_employees_with_engagement_to_org_unit($org_unit_uuid: UUID!) {
  engagements(filter: { org_unit: { uuids: [$org_unit_uuid] } }) {
    objects {
      current {
        employee_uuid
      }
    }
  }
}

query read_engagements(
  $uuids: [UUID!]!
  $from_date: DateTime
  $to_date: DateTime
) {
  engagements(
    filter: { uuids: $uuids, from_date: $from_date, to_date: $to_date }
  ) {
    objects {
      validities {
        user_key
        extension_1
        extension_2
        extension_3
        extension_4
        extension_5
        extension_6
        extension_7
        extension_8
        extension_9
        extension_10
        leave_uuid
        primary_uuid
        job_function_uuid
        org_unit_uuid
        engagement_type_uuid
        employee_uuid
        validity {
          from
          to
        }
      }
    }
  }
}

query read_engagements_by_employee_uuid($employee_uuid: UUID!) {
  engagements(filter: { employee: { uuids: [$employee_uuid] } }) {
    objects {
      current {
        uuid
        validity {
          from
          to
        }
      }
    }
  }
}

mutation set_job_title(
  $uuid: UUID!
  $from: DateTime!
  $to: DateTime
  $job_function: UUID
) {
  engagement_update(
    input: {
      uuid: $uuid
      validity: { from: $from, to: $to }
      job_function: $job_function
    }
  ) {
    uuid
  }
}

query read_employee_uuid_by_cpr_number($cpr_number: CPR!) {
  employees(filter: { cpr_numbers: [$cpr_number] }) {
    objects {
      uuid
    }
  }
}

query read_employees(
  $uuids: [UUID!]!
  $from_date: DateTime
  $to_date: DateTime
) {
  employees(
    filter: { from_date: $from_date, to_date: $to_date, uuids: $uuids }
  ) {
    objects {
      validities {
        uuid
        cpr_number
        given_name
        surname
        nickname_given_name
        nickname_surname
        validity {
          to
          from
        }
      }
    }
  }
}

query read_itusers($uuids: [UUID!]!, $from_date: DateTime, $to_date: DateTime) {
  itusers(filter: { from_date: $from_date, to_date: $to_date, uuids: $uuids }) {
    objects {
      validities {
        user_key
        validity {
          from
          to
        }
        employee_uuid
        itsystem_uuid
        engagement_uuid
      }
    }
  }
}

query read_employee_uuid_by_ituser_user_key($user_key: String!) {
  itusers(filter: { user_keys: [$user_key] }) {
    objects {
      current {
        employee_uuid
      }
    }
  }
}

query read_ituser_by_employee_and_itsystem_uuid(
  $employee_uuid: UUID!
  $itsystem_uuid: UUID!
) {
  itusers(
    filter: {
      employee: { uuids: [$employee_uuid] }
      itsystem: { uuids: [$itsystem_uuid] }
    }
  ) {
    objects {
      uuid
    }
  }
}

query read_class_uuid_by_facet_and_class_user_key(
  $facet_user_key: String!
  $class_user_key: String!
) {
  classes(
    filter: {
      facet: { user_keys: [$facet_user_key] }
      user_keys: [$class_user_key]
    }
  ) {
    objects {
      uuid
    }
  }
}

query read_class_name_by_class_uuid($class_uuid: UUID!) {
  classes(filter: { uuids: [$class_uuid] }) {
    objects {
      current {
        name
      }
    }
  }
}

mutation org_unit_engagements_refresh(
  $exchange: String!
  $org_unit_uuid: UUID!
) {
  engagement_refresh(
    exchange: $exchange
    filter: { org_unit: { uuids: [$org_unit_uuid] } }
  ) {
    objects
  }
}

mutation employee_refresh($exchange: String!, $uuids: [UUID!]!) {
  employee_refresh(exchange: $exchange, filter: { uuids: $uuids }) {
    objects
  }
}

query read_addresses(
  $uuids: [UUID!]!
  $from_date: DateTime
  $to_date: DateTime
) {
  addresses(
    filter: { uuids: $uuids, from_date: $from_date, to_date: $to_date }
  ) {
    objects {
      validities {
        value: name
        value2
        uuid
        visibility_uuid
        employee_uuid
        org_unit_uuid
        engagement_uuid
        person: employee {
          cpr_number
        }
        validity {
          from
          to
        }
        address_type {
          user_key
          uuid
        }
      }
    }
  }
}

query read_all_itusers(
  $filter: ITUserFilter!
  $cursor: Cursor = null
  $limit: int = 100
) {
  itusers(limit: $limit, cursor: $cursor, filter: $filter) {
    objects {
      validities {
        itsystem_uuid
        employee_uuid
        user_key
        uuid
      }
    }
    page_info {
      next_cursor
    }
  }
}

query read_filtered_addresses($filter: AddressFilter!) {
  addresses(filter: $filter) {
    objects {
      validities {
        address_type {
          user_key
        }
        uuid
        validity {
          from
          to
        }
      }
    }
  }
}

query read_filtered_itusers($filter: ITUserFilter!) {
  itusers(filter: $filter) {
    objects {
      validities {
        itsystem {
          user_key
        }
        uuid
        validity {
          from
          to
        }
      }
    }
  }
}

query read_engagements_is_primary($filter: EngagementFilter!) {
  engagements(filter: $filter) {
    objects {
      validities {
        is_primary
        uuid
        validity {
          from
          to
        }
      }
    }
  }
}

query read_ituser_employee_uuid($ituser_uuid: UUID!) {
  itusers(filter: { uuids: [$ituser_uuid] }) {
    objects {
      current {
        employee_uuid
      }
    }
  }
}

query read_engagement_employee_uuid($engagement_uuid: UUID!) {
  engagements(filter: { uuids: [$engagement_uuid] }) {
    objects {
      current {
        employee_uuid
      }
    }
  }
}

query read_address_relation_uuids($address_uuid: UUID!) {
  addresses(filter: { uuids: [$address_uuid] }) {
    objects {
      current {
        employee_uuid
        org_unit_uuid
      }
    }
  }
}

query read_all_ituser_user_keys_by_itsystem_uuid($itsystem_uuid: UUID!) {
  itusers(filter: { itsystem: { uuids: [$itsystem_uuid] } }) {
    objects {
      validities {
        user_key
      }
    }
  }
}

query read_org_unit_name($org_unit_uuid: UUID!) {
  org_units(filter: { uuids: [$org_unit_uuid] }) {
    objects {
      current {
        name
      }
    }
  }
}

query read_itsystem_uuid($user_key: String!) {
  itsystems(filter: { user_keys: [$user_key] }) {
    objects {
      uuid
    }
  }
}

query read_org_unit_ancestor_names($uuid: UUID!) {
  org_units(filter: { uuids: [$uuid] }) {
    objects {
      current {
        name
        ancestors {
          name
        }
      }
    }
  }
}

query read_address_uuid($filter: AddressFilter!) {
  addresses(filter: $filter) {
    objects {
      uuid
    }
  }
}


query read_ituser_uuid($filter: ITUserFilter!) {
  itusers(filter: $filter) {
    objects {
      uuid
    }
  }
}

query read_engagement_uuid($filter: EngagementFilter!) {
  engagements(filter: $filter) {
    objects {
      uuid
    }
  }
}

query read_person_uuid($filter: EmployeeFilter) {
  employees(filter: $filter) {
    objects {
      uuid
    }
  }
}

query read_engagement_enddate($employee_uuid: UUID!) {
  engagements(filter: {employee: {uuids: [$employee_uuid]}, from_date: null, to_date: null}) {
    objects {
      validities {
        validity {
          from
          to
        }
      }
    }
  }
}

query read_org_unit_ancestors($uuid: UUID!) {
  org_units(filter: { uuids: [$uuid] }) {
    objects {
      current {
        ancestors {
          uuid
        }
      }
    }
  }
}

query read_engagement_manager(
  $engagement_uuid: UUID!
  $filter: OrgUnitsboundmanagerfilter
) {
  engagements(filter: {uuids: [$engagement_uuid]}) {
    objects {
      current {
        managers(filter: $filter, inherit: true, exclude_self: true) {
          person {
            uuid
          }
        }
      }
    }
  }
}
