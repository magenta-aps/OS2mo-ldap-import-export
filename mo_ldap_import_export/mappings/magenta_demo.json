{
  "init": {
    "it_systems": {
      "ADGUID": "Active Directory GUID",
      "ADSAMA": "Active Directory sAMAccountName",
    },
    "facets" : {
      "employee_address_type": {
        "AddressEmployeeText": {
          "title": "Address (free-text)",
          "scope": "TEXT"
        }
      }
    }
  },
  "ldap_to_mo": {
    "Employee": {
      "objectClass": "ramodels.mo.employee.Employee",
      "_import_to_mo_": "true",
      "givenname": "{{ldap.givenName}}",
      "surname": "{{ldap.sn}}",
      "cpr_no": "{{ldap.employeeID|strip_non_digits or NONE}}",
      "uuid": "{{ employee_uuid or NONE }}"
    },
    // Note: This key needs to be a valid MO IT-system user_key*
    // Note2: An "Active Directory" IT system is needed in case LDAP objects do not
    // Contain CPR-numbers. Its user_key attribute must link to ldap.distinguishedName
    "ADGUID": {
      "objectClass": "ramodels.mo.details.it_system.ITUser",
      "_import_to_mo_": "true",
      "user_key": "{{ ldap.objectGUID|remove_curly_brackets }}",
      "itsystem": "{{ dict(uuid=get_it_system_uuid('ADGUID')) }}",
      "validity": "{{ dict(from_date=now()|mo_datestring) }}",
      "person": "{{ dict(uuid=employee_uuid or NONE) }}"
    },
    // Note: This key needs to be a valid MO address type user_key*
    "EmailEmployee": {
      "objectClass": "ramodels.mo.details.address.Address",
      "_import_to_mo_": "true",
      "value": "{{ldap.mail or NONE}}",
      "validity": "{{ dict(from_date = now()|mo_datestring) }}",
      "address_type": "{{ dict(uuid=get_employee_address_type_uuid('EmailEmployee')) }}",
      "person": "{{ dict(uuid=employee_uuid or NONE) }}"
    },
    // Note: This key needs to be a valid MO address type user_key*
    "AddressEmployeeText": {
      "objectClass": "ramodels.mo.details.address.Address",
      "_import_to_mo_": "true",
      "value": "{{ nonejoin(ldap.streetAddress, ldap.postalCode, ldap.l) }}",
      "validity": "{{ dict(from_date=now()|mo_datestring) }}",
      "address_type": "{{ dict(uuid=get_employee_address_type_uuid('AddressEmployeeText')) }}",
      "person": "{{ dict(uuid=employee_uuid or NONE) }}"
    },
    // Note: This key needs to be a valid MO address type user_key*
    "LocationUnit": {
      "objectClass": "ramodels.mo.details.address.Address",
      "_import_to_mo_": "true",
      "value": "{{ ldap.postalAddress or NONE }}",
      "validity": "{{ dict(from_date=now()|mo_datestring) }}",
      "address_type": "{{ dict(uuid=get_org_unit_address_type_uuid('LocationUnit')) }}",
      "org_unit": "{{ dict(uuid=get_or_create_org_unit_uuid(ldap.division)) }}"
    },
    "Engagement": {
      "objectClass": "ramodels.mo.details.engagement.Engagement",
      "_import_to_mo_": "true",
      "org_unit": "{{ dict(uuid=get_or_create_org_unit_uuid(ldap.division)) }}",
      "job_function": "{{ dict(uuid=get_or_create_job_function_uuid(ldap.title)) }}",
      "engagement_type": "{{ dict(uuid=get_or_create_engagement_type_uuid(ldap.employeeType)) }}",
      "user_key": "{{ ldap.primaryGroupID or '-'}}",
      "validity": "{{ dict(from_date=now()|mo_datestring) }}",
      "person": "{{ dict(uuid=employee_uuid or NONE) }}",
      "primary": "{{ dict(uuid=get_primary_type_uuid('primary')) }}"
    },
    "PhoneEmployee": {
      "objectClass": "ramodels.mo.details.address.Address",
      "_import_to_mo_": "manual_import_only",
      "value": "{{ ldap.telephoneNumber or NONE }}",
      "validity": "{{ dict(from_date = now()|mo_datestring) }}",
      "address_type": "{{ dict(uuid=get_employee_address_type_uuid('PhoneEmployee')) }}",
      "person": "{{ dict(uuid=employee_uuid or NONE) }}"
    },
    "ADSAMA": {
      "objectClass": "ramodels.mo.details.it_system.ITUser",
      "_import_to_mo_": "manual_import_only",
      "user_key": "{{ ldap.sAMAccountName }}",
      "itsystem": "{{ dict(uuid=get_it_system_uuid('ADSAMA')) }}",
      "validity": "{{ dict(from_date=now()|mo_datestring) }}",
      "person": "{{ dict(uuid=employee_uuid or NONE) }}"
    },
  },
  "mo_to_ldap": {
    "Employee": {
      "objectClass": "user",
      "_export_to_ldap_": "true",
      "givenName": "{{mo_employee.givenname}}",
      "sn": "{{mo_employee.surname}}",
      "displayName": "{{mo_employee.surname}}, {{mo_employee.givenname}}",
      "employeeID": "{{mo_employee.cpr_no or NONE}}",
      "department": "{{NONE}}"
    },
    // Note: This key needs to be a valid MO IT-system user_key*
    "ADGUID": {
      "objectClass": "user",
      "_export_to_ldap_": "true",
      "objectGUID" : "{{ '{' + mo_employee_it_user.user_key + '}' }}",
      "employeeID": "{{mo_employee.cpr_no}}"
    },
    // Note: This key needs to be a valid MO address type user_key*
    "EmailEmployee": {
      "objectClass": "user",
      "_export_to_ldap_": "true",
      "mail": "{{mo_employee_address.value}}",
      "employeeID": "{{mo_employee.cpr_no}}"
    },
    // Note: This key needs to be a valid MO address type user_key*
    "AddressEmployeeText": {
      "objectClass": "user",
      "_export_to_ldap_": "true",
      "employeeID": "{{mo_employee.cpr_no}}",
      "streetAddress": "{{mo_employee_address.value|splitlast(',')|first|splitlast(',')|first|trim}}",
      "postalCode": "{{mo_employee_address.value|splitlast(',')|first|splitlast(',')|last|trim}}",
      "l": "{{mo_employee_address.value|splitlast(',')|last|trim}}",
    },
    "LocationUnit": {
      "objectClass": "user",
      "_export_to_ldap_": "true",
      "postalAddress": "{{mo_org_unit_address.value}}",
      "employeeID": "{{mo_employee.cpr_no}}",
      "division": "{{get_org_unit_path_string(mo_org_unit_address.org_unit.uuid)}}"
    },
    "Engagement" : {
      "objectClass": "user",
      "_export_to_ldap_": "true",
      "employeeID": "{{mo_employee.cpr_no}}",
      "department": "{{NONE}}",
      "company": "{{NONE}}",
      "departmentNumber": "{{NONE}}",
      "division": "{{get_org_unit_path_string(mo_employee_engagement.org_unit.uuid)}}",
      "primaryGroupID": "{{NONE}}",
      "employeeType": "{{get_engagement_type_user_key(mo_employee_engagement.engagement_type.uuid)}}",
      "memberOf": "{{NONE}}",
      "primaryGroupID": "{{mo_employee_engagement.user_key}}",
      "title": "{{get_job_function_user_key(mo_employee_engagement.job_function.uuid)}}",
      "comment": "{{mo_employee_engagement.validity.to_date.strftime('%Y-%m-%d') if mo_employee_engagement.validity.to_date else NONE}}",
    },
    "PhoneEmployee": {
      "objectClass": "user",
      "_export_to_ldap_": "false",
      "telephoneNumber": "{{mo_employee_address.value}}",
      "employeeID": "{{mo_employee.cpr_no}}",
    },
    "ADSAMA": {
      "objectClass": "user",
      "_export_to_ldap_": "true",
      "sAMAccountName" : "{{ mo_employee_it_user.user_key }}",
      "employeeNumber": "{{mo_employee.cpr_no}}"
    },

  },
  "username_generator": {
     "objectClass" : "UserNameGenerator",
     "char_replacement":{
         "â": "a",
         "ä": "a",
         "à": "a",
         "å": "a",
         "Ä": "a",
         "Å": "a",
         "æ": "a",
         "Æ": "a",
         "á": "a",
         "Á": "a",
         "Â": "a",
         "À": "a",
         "ã": "a",
         "Ã": "a",
         "é": "e",
         "ê": "e",
         "ë": "e",
         "è": "e",
         "É": "e",
         "Ê": "e",
         "Ë": "e",
         "È": "e",
         "ï": "i",
         "î": "i",
         "ì": "i",
         "í": "i",
         "Î": "i",
         "Ï": "i",
         "ô": "o",
         "ö": "o",
         "ò": "o",
         "Ö": "o",
         "ø": "o",
         "Ø": "o",
         "ó": "o",
         "Ó": "o",
         "Ô": "o",
         "Ò": "o",
         "õ": "o",
         "Õ": "o",
         "ü": "u",
         "û": "u",
         "ù": "u",
         "Ü": "u",
         "ú": "u",
         "Ú": "u",
         "Û": "u",
         "Ù": "u",
         "ÿ": "y",
         "ý": "y",
         "Ý": "y",
         "Ç": "c",
         "ç": "c",
         "ñ": "n",
         "Ñ": "n"
     },
     // Note: We need some 'X's in this list. to account for potential duplicates
     // Note2: We need some short combinations in this list, to account for persons with
     // short names.
     //
     // Index:
     // F: First name
     // 1: First middle name
     // 2: Second middle name
     // 3: Third middle name
     // L: Last name
     // X: Number
     //
     // Example1: If combination = "F11LL", 'Hans Jakob Hansen' returns username="hjaha"
     // Example2: If combination = "FFLL", 'Hans Jakob Hansen' returns username="haha"
     "combinations_to_try": [
            "F123L",
            "F122L",
            "F111L",
            "F112L",
            "F113L",
            "F133L",
            "F223L",
            "F233L",
            "F333L",
            "F11LL",
            "F12LL",
            "F13LL",
            "F22LL",
            "F23LL",
            "F33LL",
            "FLLLL",
            "FF13L",
            "FF12L",
            "FF11L",
            "FF23L",
            "FF22L",
            "FF33L",
            "FF1LL",
            "FF2LL",
            "FF3LL",
            "FFLLL",
            "FFF1L",
            "FFF2L",
            "FFF3L",
            "FFFLL",
            "FFF11",
            "FFF12",
            "FFF13",
            "FFF22",
            "FFF23",
            "FFF33",
            "FFFFL",
            "FFFF1",
            "FFFF2",
            "FFFF3",
            "FF123",
            "FF122",
            "FF113",
            "FF112",
            "FF111",
            "FF133",
            "FF233",
            "FF223",
            "FF222",
            "FF333",
            "F1233",
            "F1223",
            "F1123",
            "F1113",
            "F1112",
            "F1122",
            "F1222",
            "F1133",
            "F1333",
            "F2333",
            "F2233",
            "F2223",
            "F2222",
            "F3333",
            "F1111",
            "LLLLL",
            "1LLLL",
            "11LLL",
            "111LL",
            "1111L",
            "12LLL",
            "122LL",
            "1222L",
            "123LL",
            "1233L",
            "13LLL",
            "133LL",
            "1333L",
            "2LLLL",
            "22LLL",
            "222LL",
            "2222L",
            "23LLL",
            "233LL",
            "2333L",
            "3LLLL",
            "33LLL",
            "333LL",
            "3333L",
            "F11L",
            "F12L",
            "F13L",
            "F22L",
            "F23L",
            "F33L",
            "FF1L",
            "FF2L",
            "FF3L",
            "FLLL",
            "FFLL",
            "FFFL",
            "F1LL",
            "F2LL",
            "F3LL",
            "F1L",
            "F2L",
            "F3L",
            "FLL",
            "FFL",
            "FF1",
            "FF2",
            "FF3",
            "F11",
            "F12",
            "F13",
            "F22",
            "F23",
            "F33",
            "F12XL",
            "F11XL",
            "F13XL",
            "F22XL",
            "F23XL",
            "F33XL",
            "F1XLL",
            "F2XLL",
            "F3XLL",
            "FXLLL",
            "FX13L",
            "FX12L",
            "FX11L",
            "FX23L",
            "FX22L",
            "FX33L",
            "FX1LL",
            "FX2LL",
            "FX3LL",
            "FF1XL",
            "FF2XL",
            "FF3XL",
            "FFXLL",
            "FFX1L",
            "FFX2L",
            "FFX3L",
            "FFFXL",
            "FFFFX",
            "FFF1X",
            "FFF2X",
            "FFF3X",
            "FF11X",
            "FF12X",
            "FF13X",
            "FF22X",
            "FF23X",
            "FF33X",
            "F123X",
            "F111X",
            "F112X",
            "F113X",
            "F122X",
            "F133X",
            "F222X",
            "F223X",
            "F233X",
            "F333X",
            "F1LX",
            "F2LX",
            "F3LX",
            "F12X",
            "F13X",
            "F11X",
            "F23X",
            "F22X",
            "F33X",
            "FFLX",
            "FF1X",
            "FF2X",
            "FF3X",
            "FFFX",
            "123X",
            "122X",
            "111X",
            "223X",
            "233X",
            "333X",
            "LLLX",
            "F1XL",
            "F2XL",
            "F3XL",
            "FFXL",
            "F1X2",
            "F1X3",
            "F2X3",
            "FFX1",
            "FFX2",
            "FFX3",
            "FX1L",
            "FX2L",
            "FX3L",
            "FXLL",
            "FX12",
            "FX13",
            "FX11",
            "FX23",
            "FX22",
            "FX33",
            "F1111L",
            "F1112L",
            "F1113L",
            "F1122L",
            "F1123L",
            "F1133L",
            "F1222L",
            "F1223L",
            "F1233L",
            "F2222L",
            "F2223L",
            "F2233L",
            "F2333L",
            "F3333L",
            "FF111L",
            "FF112L",
            "FF113L",
            "FF122L",
            "FF123L",
            "FF222L",
            "FF223L",
            "FF233L",
            "FF333L",
            "FFF11L",
            "FFF12L",
            "FFF13L",
            "FFF22L",
            "FFF23L",
            "FFF33L",
            "FFFF1L",
            "FFFF2L",
            "FFFF3L",
            "F111LL",
            "F112LL",
            "F113LL",
            "F122LL",
            "F123LL",
            "F133LL",
            "F222LL",
            "F223LL",
            "F233LL",
            "F333LL",
            "F11LLL",
            "F12LLL",
            "F13LLL",
            "F22LLL",
            "F23LLL",
            "F33LLL",
            "F1LLLL",
            "F2LLLL",
            "F3LLLL",
            "FLLLLL",
            "FFLLLL",
            "FFFLLL",
            "FFFFLL",
            "FFFFFL",
            "FFFFF",
            "FFFFFX",
            "FFFF",
            "FFFFX",
            "FFF",
            "FFFX",
            "FF",
            "FFX",
     ],
     "forbidden_usernames":["nazi",
                            "krig"]
   }
}

// *Valid address type names can be obtained by making a new address and folding out the
// 'Addressetype' listbox

// *Valid it system names can be obtained by making a new it-user and folding out the
// 'IT-systemer' listbox

// Note: Only keys in the relevant mo_to_ldap dicts are retrieved when requesting an
// ldap object
