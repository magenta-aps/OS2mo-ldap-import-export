# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0
import json
from typing import Any
from unittest.mock import ANY
from uuid import UUID

import pytest
from fastramqpi.pytest_util import retry
from httpx import AsyncClient
from ldap3 import Connection
from more_itertools import one

from mo_ldap_import_export.autogenerated_graphql_client import EmployeeCreateInput
from mo_ldap_import_export.autogenerated_graphql_client import EmployeeFilter
from mo_ldap_import_export.autogenerated_graphql_client import EmployeeUpdateInput
from mo_ldap_import_export.autogenerated_graphql_client import GraphQLClient
from mo_ldap_import_export.ldap import ldap_add
from mo_ldap_import_export.ldap import ldap_modify
from mo_ldap_import_export.ldap import ldap_search
from mo_ldap_import_export.moapi import MOAPI
from mo_ldap_import_export.utils import combine_dn_strings


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "False",
        "LISTEN_TO_CHANGES_IN_LDAP": "True",
        "CONVERSION_MAPPING": json.dumps(
            {
                "ldap_to_mo": {
                    "Employee": {
                        "objectClass": "ramodels.mo.employee.Employee",
                        "_import_to_mo_": "true",
                        "_ldap_attributes_": ["employeeNumber", "givenName", "sn"],
                        "_mapper_": "{{ obj.cpr_no }}",
                        "uuid": "{{ employee_uuid or NONE }}",  # TODO: why is this required?
                        "cpr_no": "{{ ldap.employeeNumber }}",
                        "givenname": "{{ ldap.givenName }}",
                        "surname": "{{ ldap.sn }}",
                        "nickname_givenname": "foo",
                        "nickname_surname": "bar",
                    },
                },
                # TODO: why is this required?
                "mo_to_ldap": {
                    "Employee": {
                        "_export_to_ldap_": "false",
                    },
                },
                # TODO: why is this required?
                "username_generator": {
                    "objectClass": "UserNameGenerator",
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_to_mo(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    mo_org_unit: UUID,
    ldap_connection: Connection,
    ldap_org: list[str],
) -> None:
    cpr = "2108613133"

    @retry()
    async def assert_employee(expected: dict) -> None:
        employees = await graphql_client._testing__employee_read(
            filter=EmployeeFilter(cpr_numbers=[cpr])
        )
        employee = one(employees.objects)
        validities = one(employee.validities)
        assert validities.dict() == expected

    person_dn = combine_dn_strings(["uid=abk"] + ldap_org)

    # LDAP: Create
    given_name = "create"
    await ldap_add(
        ldap_connection,
        dn=person_dn,
        object_class=["top", "person", "organizationalPerson", "inetOrgPerson"],
        attributes={
            "objectClass": ["top", "person", "organizationalPerson", "inetOrgPerson"],
            "ou": "os2mo",
            "cn": "Aage Bach Klarskov",
            "sn": "Bach Klarskov",
            "employeeNumber": cpr,
            "givenName": given_name,
        },
    )
    mo_employee = {
        "uuid": ANY,
        "user_key": ANY,
        "cpr_number": cpr,
        "given_name": given_name,
        "surname": "Bach Klarskov",
        "nickname_given_name": "foo",
        "nickname_surname": "bar",
    }
    await assert_employee(mo_employee)

    # LDAP: Edit
    given_name = "edit"
    await ldap_modify(
        ldap_connection,
        dn=person_dn,
        changes={
            "givenName": [("MODIFY_REPLACE", given_name)],
        },
    )
    mo_employee = {
        **mo_employee,
        "given_name": given_name,
    }
    await assert_employee(mo_employee)


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "LISTEN_TO_CHANGES_IN_MO": "True",
        "LISTEN_TO_CHANGES_IN_LDAP": "False",
        "CONVERSION_MAPPING": json.dumps(
            {
                # TODO: why is this required?
                "ldap_to_mo": {
                    "Employee": {
                        "objectClass": "ramodels.mo.employee.Employee",
                        "_import_to_mo_": "false",
                        "_ldap_attributes_": [],
                        "uuid": "{{ employee_uuid or NONE }}",
                    },
                },
                "mo2ldap": """
                    {% set mo_employee = load_mo_employee(uuid, current_objects_only=False) %}
                    {{
                        {
                            "employeeNumber": mo_employee.cpr_no,
                            "carLicense": mo_employee.uuid|string,
                            "sn": mo_employee.surname,
                            "givenName": mo_employee.givenname,
                            "displayName": mo_employee.nickname_givenname + " " + mo_employee.nickname_surname
                        }|tojson
                    }}
                """,
                "mo_to_ldap": {},
                # TODO: why is this required?
                "username_generator": {
                    "objectClass": "UserNameGenerator",
                    "combinations_to_try": ["FFFX", "LLLX"],
                },
            }
        ),
    }
)
async def test_to_ldap(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    mo_api: MOAPI,
    mo_org_unit: UUID,
    ldap_connection: Connection,
    ldap_org: list[str],
) -> None:
    cpr = "2108613133"

    @retry()
    async def assert_employee(dn: str, expected: dict[str, Any]) -> None:
        response, _ = await ldap_search(
            ldap_connection,
            search_base=combine_dn_strings(ldap_org),
            search_filter=f"(employeeNumber={cpr})",
            attributes=[
                "employeeNumber",
                "carLicense",
                "sn",
                "givenName",
                "displayName",
            ],
        )
        employee = one(response)
        assert employee["dn"] == dn
        assert employee["attributes"] == expected

    # MO: Create
    mo_employee = await graphql_client._testing_user_create(
        input=EmployeeCreateInput(
            cpr_number=cpr,
            given_name="create",
            surname="Mustermann",
            nickname_given_name="Max",
            nickname_surname="Erika",
        )
    )
    await assert_employee(
        "cn=create Mustermann,ou=os2mo,o=magenta,dc=magenta,dc=dk",
        {
            "employeeNumber": "2108613133",
            "carLicense": [str(mo_employee.uuid)],
            "sn": ["Mustermann"],
            "givenName": ["create"],
            "displayName": "Max Erika",
        },
    )

    # MO: Edit
    await graphql_client._testing_user_update(
        input=EmployeeUpdateInput(
            uuid=mo_employee.uuid,
            given_name="update",
            surname="Musterfrau",
            nickname_given_name="Manu",
            nickname_surname="Muster",
            validity={"from": "2011-12-13T14:15:16Z"},
            # TODO: why is this required?
            cpr_number=cpr,
        )
    )
    await assert_employee(
        "cn=create Mustermann,ou=os2mo,o=magenta,dc=magenta,dc=dk",
        {
            "employeeNumber": "2108613133",
            "carLicense": [str(mo_employee.uuid)],
            "sn": ["Musterfrau"],
            "givenName": ["update"],
            "displayName": "Manu Muster",
        },
    )
