# SPDX-FileCopyrightText: 2019-2020 Magenta ApS
# SPDX-License-Identifier: MPL-2.0
from uuid import uuid4

import pytest
from pydantic import parse_obj_as

from mo_ldap_import_export.autogenerated_graphql_client.client import GraphQLClient
from mo_ldap_import_export.autogenerated_graphql_client.input_types import (
    OrganisationUnitCreateInput,
)
from mo_ldap_import_export.converters import get_org_unit_name_for_parent
from tests.graphql_mocker import GraphQLMocker


@pytest.mark.integration_test
@pytest.mark.usefixtures("test_client")
async def test_integration_get_org_unit_name_for_parent(
    graphql_client: GraphQLClient,
) -> None:
    org_unit_type = uuid4()

    municipality_name = "Municipality"
    municipality = await graphql_client._testing_org_unit_create(
        parse_obj_as(
            OrganisationUnitCreateInput,
            {
                "name": municipality_name,
                "org_unit_type": org_unit_type,
                "validity": {"from": "1970-01-01T00:00:00Z"},
            },
        )
    )
    childcare_name = "Childcare"
    childcare = await graphql_client._testing_org_unit_create(
        parse_obj_as(
            OrganisationUnitCreateInput,
            {
                "parent": municipality.uuid,
                "name": childcare_name,
                "org_unit_type": org_unit_type,
                "validity": {"from": "1970-01-01T00:00:00Z"},
            },
        )
    )
    daycares_name = "Daycares"
    daycares = await graphql_client._testing_org_unit_create(
        parse_obj_as(
            OrganisationUnitCreateInput,
            {
                "parent": childcare.uuid,
                "name": daycares_name,
                "org_unit_type": org_unit_type,
                "validity": {"from": "1970-01-01T00:00:00Z"},
            },
        )
    )
    windmill_name = "Windmill Daycare"
    windmill = await graphql_client._testing_org_unit_create(
        parse_obj_as(
            OrganisationUnitCreateInput,
            {
                "parent": daycares.uuid,
                "name": windmill_name,
                "org_unit_type": org_unit_type,
                "validity": {"from": "1970-01-01T00:00:00Z"},
            },
        )
    )

    name = await get_org_unit_name_for_parent(graphql_client, windmill.uuid, 0)
    assert name == municipality_name

    name = await get_org_unit_name_for_parent(graphql_client, windmill.uuid, 1)
    assert name == childcare_name

    name = await get_org_unit_name_for_parent(graphql_client, windmill.uuid, 2)
    assert name == daycares_name

    name = await get_org_unit_name_for_parent(graphql_client, windmill.uuid, 3)
    assert name == windmill_name

    name = await get_org_unit_name_for_parent(graphql_client, windmill.uuid, 4)
    assert name is None

    name = await get_org_unit_name_for_parent(graphql_client, windmill.uuid, 5)
    assert name is None


async def test_get_org_unit_name_for_parent(graphql_mock: GraphQLMocker) -> None:
    graphql_client = GraphQLClient("http://example.com/graphql")

    ancestors = [
        "Plejecenter Nord",
        "Plejecentre",
        "Sundhed",
        "Kolding Kommune",
    ]

    route = graphql_mock.query("read_org_unit_ancestor_names")
    route.result = {
        "org_units": {
            "objects": [
                {
                    "current": {
                        "name": "Teknik Nord",
                        "ancestors": [{"name": name} for name in ancestors],
                    }
                }
            ]
        }
    }

    # Reversed and None added
    expected_layers = ancestors[::-1] + ["Teknik Nord", None]
    for layer, expected in enumerate(expected_layers):
        name = await get_org_unit_name_for_parent(graphql_client, uuid4(), layer)
        assert name == expected
